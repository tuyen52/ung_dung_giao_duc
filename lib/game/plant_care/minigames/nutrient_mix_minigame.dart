import 'dart:async';
import 'package:flutter/material.dart';
import '../plant_assets.dart'; // n·ªÅn gi·ªëng c√°c mini-game kh√°c

class NutrientMiniGameResult {
  /// ƒêi·ªÉm 0..1 theo ƒë·ªô g·∫ßn v√πng v√†ng
  final double score0to1;

  /// T·ªïng ‚Äúm·ª©c dinh d∆∞·ª°ng‚Äù 0..1 m√† b√© pha
  final double totalLevel;

  const NutrientMiniGameResult({
    required this.score0to1,
    required this.totalLevel,
  });
}

/// Mini-game b√≥n ph√¢n (kh√¥ng ƒë·∫øm gi·ªù):
/// B·∫•m / nh·∫•n gi·ªØ N‚ÄìP‚ÄìK ƒë·ªÉ ƒë∆∞a m·ª©c dinh d∆∞·ª°ng v√†o V√ôNG V√ÄNG (ƒë√£ thu nh·ªè),
/// c√≥ th√™m V·∫†CH CHU·∫®N ch√≠nh x√°c ·ªü gi·ªØa v√πng.
class NutrientMixMinigamePage extends StatefulWidget {
  final double targetLow;   // 0..1
  final double targetHigh;  // 0..1
  final int durationSec;    // Gi·ªØ ƒë·ªÉ t∆∞∆°ng th√≠ch, KH√îNG d√πng

  const NutrientMixMinigamePage({
    super.key,
    required this.targetLow,
    required this.targetHigh,
    this.durationSec = 20,
  });

  @override
  State<NutrientMixMinigamePage> createState() => _NutrientMixMinigamePageState();
}

class _NutrientMixMinigamePageState extends State<NutrientMixMinigamePage>
    with SingleTickerProviderStateMixin {
  // üëâ B·∫ÆT ƒê·∫¶U T·ª™ 0%
  double _level = 0.0; // 0..1
  Timer? _holdTimer;

  late final AnimationController _pulse =
  AnimationController(vsync: this, duration: const Duration(milliseconds: 900))
    ..repeat(reverse: true);

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    // precache background ƒë·ªÉ m∆∞·ª£t
    precacheImage(const AssetImage(PlantAssets.bg), context);
  }

  @override
  void dispose() {
    _holdTimer?.cancel();
    _pulse.dispose();
    super.dispose();
  }

  // ----- logic -----
  double get _baseCenter =>
      ((widget.targetLow + widget.targetHigh) / 2).clamp(0.0, 1.0);

  // half g·ªëc c·ªßa band cha
  double get _baseHalf =>
      ((widget.targetHigh - widget.targetLow) / 2).clamp(0.06, 0.25);

  // üëâ v√πng v√†ng hi·ªÉn th·ªã & ch·∫•m ƒëi·ªÉm: THU NH·ªé 1/2 ƒë·ªÉ tƒÉng ƒë·ªô kh√≥
  double get _visHalf => (_baseHalf * 0.5).clamp(0.04, 0.18);

  bool get _inBand => (_level - _baseCenter).abs() <= _visHalf;

  void _add(double v) => setState(() => _level = (_level + v).clamp(0, 1));
  void _minus(double v) => setState(() => _level = (_level - v).clamp(0, 1));

  void _startHold(void Function() fn) {
    fn();
    _holdTimer?.cancel();
    _holdTimer = Timer.periodic(const Duration(milliseconds: 110), (_) => fn());
  }

  void _stopHold() {
    _holdTimer?.cancel();
    _holdTimer = null;
  }

  int _pct(double x) => (x * 100).round();

  void _finish() {
    // ch·∫•m theo v√πng v√†ng ƒë√£ thu nh·ªè
    final closeness =
    (1.0 - ((_level - _baseCenter).abs() / (_visHalf == 0 ? 1 : _visHalf)))
        .clamp(0.0, 1.0);
    Navigator.pop(
      context,
      NutrientMiniGameResult(score0to1: closeness, totalLevel: _level),
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    final visLow = (_baseCenter - _visHalf).clamp(0.0, 1.0);
    final visHigh = (_baseCenter + _visHalf).clamp(0.0, 1.0);

    final low = _pct(visLow);
    final high = _pct(visHigh);
    final now = _pct(_level);

    return Scaffold(
      body: Stack(
        fit: StackFit.expand,
        children: [
          // üëâ n·ªÅn gi·ªëng c√°c m√†n kh√°c
          Image.asset(PlantAssets.bg, fit: BoxFit.cover),
          // overlay nh·∫π ƒë·ªÉ ch·ªØ d·ªÖ ƒë·ªçc
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  Colors.white.withOpacity(0.00),
                  Colors.white.withOpacity(0.10),
                ],
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
              ),
            ),
          ),

          SafeArea(
            child: Column(
              children: [
                // Header
                Padding(
                  padding: const EdgeInsets.fromLTRB(12, 8, 12, 4),
                  child: Row(
                    children: [
                      IconButton(
                        icon: const Icon(Icons.close),
                        onPressed: () => Navigator.pop(context),
                      ),
                      const Spacer(),
                    ],
                  ),
                ),

                Text(
                  'B√≥n ph√¢n N‚ÄìP‚ÄìK cho v·ª´a ƒë·ªß!',
                  style: theme.textTheme.titleLarge?.copyWith(fontWeight: FontWeight.w800),
                ),
                const SizedBox(height: 6),
                Text(
                  'M·ª•c ti√™u: $low‚Äì$high%  ‚Ä¢  ƒêang: $now%',
                  style: theme.textTheme.bodyMedium?.copyWith(color: Colors.black54),
                ),
                const SizedBox(height: 10),

                // B√¨nh + v√πng v√†ng (ƒë√£ thu nh·ªè) + V·∫°ch chu·∫©n
                Expanded(
                  child: Center(
                    child: _TankWithBandAndLine(
                      level: _level,
                      center: _baseCenter,
                      half: _visHalf,
                      pulse: _pulse,
                    ),
                  ),
                ),

                // N√∫t ƒëi·ªÅu khi·ªÉn (to h∆°n)
                Padding(
                  padding: const EdgeInsets.fromLTRB(16, 8, 16, 8),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: [
                      _DoseButton(
                        color: const Color(0xFFE53935),
                        icon: 'N',
                        label: '+5%',
                        onTap: () => _add(0.05),
                        onHoldStart: () => _startHold(() => _add(0.05)),
                        onHoldEnd: _stopHold,
                      ),
                      _DoseButton(
                        color: const Color(0xFFFB8C00),
                        icon: 'P',
                        label: '+10%',
                        onTap: () => _add(0.10),
                        onHoldStart: () => _startHold(() => _add(0.10)),
                        onHoldEnd: _stopHold,
                      ),
                      _DoseButton(
                        color: const Color(0xFF8BC34A),
                        icon: 'K',
                        label: '+15%',
                        onTap: () => _add(0.15),
                        onHoldStart: () => _startHold(() => _add(0.15)),
                        onHoldEnd: _stopHold,
                      ),
                      _DoseButton(
                        color: Colors.blueGrey,
                        icon: '‚Ü∫',
                        label: '‚àí5%',
                        onTap: () => _minus(0.05),
                        onHoldStart: () => _startHold(() => _minus(0.05)),
                        onHoldEnd: _stopHold,
                      ),
                    ],
                  ),
                ),

                // N√∫t √Åp d·ª•ng
                Padding(
                  padding: const EdgeInsets.only(bottom: 16),
                  child: FilledButton.icon(
                    onPressed: _finish,
                    icon: Icon(_inBand ? Icons.verified : Icons.check_circle_outline),
                    label: const Text('√Åp d·ª•ng'),
                    style: FilledButton.styleFrom(
                      backgroundColor: const Color(0xFF00695C),
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(horizontal: 26, vertical: 16),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(28)),
                      elevation: 6,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

// ================== UI ph·ª• ==================

/// ‚ÄúB√¨nh‚Äù ch·ª©a dung d·ªãch + V√ôNG V√ÄNG (ƒë√£ thu nh·ªè) + V·∫†CH CHU·∫®N ch√≠nh x√°c
class _TankWithBandAndLine extends StatelessWidget {
  final double level;     // 0..1
  final double center;    // 0..1
  final double half;      // 0..0.5 (ƒë√£ thu nh·ªè)
  final Animation<double> pulse;

  const _TankWithBandAndLine({
    required this.level,
    required this.center,
    required this.half,
    required this.pulse,
  });

  @override
  Widget build(BuildContext context) {
    const outerW = 260.0, outerH = 240.0;
    const inset = 16.0;
    const innerW = outerW - inset * 2; // ph·∫ßn ‚Äúru·ªôt b√¨nh‚Äù
    const innerH = outerH - inset * 2;

    // to·∫° ƒë·ªô theo ph·∫ßn ru·ªôt (ƒë·ªÉ n∆∞·ªõc kh√¥ng ch·∫°m vi·ªÅn)
    final fillTop = (1 - level) * innerH;
    final bandTop = (1 - (center + half)) * innerH;
    final bandBottom = (1 - (center - half)) * innerH;
    final lineY = (1 - center) * innerH; // v·∫°ch chu·∫©n

    return SizedBox(
      width: outerW,
      height: outerH,
      child: Stack(
        children: [
          // Khung b√¨nh
          Positioned.fill(
            child: Container(
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.75),
                borderRadius: BorderRadius.circular(22),
                border: Border.all(color: Colors.blueGrey.shade200, width: 3),
                boxShadow: [BoxShadow(color: Colors.black.withOpacity(0.06), blurRadius: 10)],
              ),
            ),
          ),

          // V√πng v√†ng (n·∫±m trong ru·ªôt b√¨nh, kh√¥ng ch·∫°m vi·ªÅn)
          Positioned(
            left: inset,
            right: inset,
            top: inset + bandTop,
            height: (bandBottom - bandTop).clamp(12.0, innerH),
            child: AnimatedBuilder(
              animation: pulse,
              builder: (_, __) => Container(
                decoration: BoxDecoration(
                  color: Colors.amber.withOpacity(0.22 + 0.10 * pulse.value),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: Colors.amber.shade600),
                ),
              ),
            ),
          ),

          // V·∫†CH CHU·∫®N ch√≠nh x√°c (gi·ªØa v√πng v√†ng)
          Positioned(
            left: inset + 4,
            right: inset + 4,
            top: inset + lineY - 1,
            height: 2,
            child: AnimatedBuilder(
              animation: pulse,
              builder: (_, __) => Container(
                color: Color.lerp(Colors.orange, Colors.green, pulse.value),
              ),
            ),
          ),

          // Nh√£n ‚ÄúV·∫°ch chu·∫©n‚Äù
          Positioned(
            left: 0,
            right: 0,
            top: (inset + lineY - 24).clamp(0.0, outerH - 24),
            child: const IgnorePointer(
              child: Text(
                'V·∫°ch chu·∫©n',
                textAlign: TextAlign.center,
                style: TextStyle(fontWeight: FontWeight.w800, color: Colors.brown),
              ),
            ),
          ),

          // N∆∞·ªõc (fill) ‚Äì ch·ªâ trong ‚Äúru·ªôt b√¨nh‚Äù
          Positioned(
            left: inset,
            right: inset,
            top: inset,
            child: ClipRRect(
              borderRadius: BorderRadius.circular(14),
              child: AnimatedContainer(
                duration: const Duration(milliseconds: 220),
                curve: Curves.easeOut,
                alignment: Alignment.bottomCenter,
                width: innerW,
                height: innerH,
                child: AnimatedContainer(
                  duration: const Duration(milliseconds: 220),
                  curve: Curves.easeOut,
                  width: innerW,
                  height: innerH - fillTop,
                  decoration: const BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.topCenter,
                      end: Alignment.bottomCenter,
                      colors: [Color(0xFFB3E5FC), Color(0xFF81D4FA)],
                    ),
                  ),
                ),
              ),
            ),
          ),

          // icon chai ph√¢n (gi·ªØ cho vui m·∫Øt)
          const Positioned(top: 8, left: 10, child: Text('üß™', style: TextStyle(fontSize: 28))),
        ],
      ),
    );
  }
}

class _DoseButton extends StatelessWidget {
  final Color color;
  final String icon;
  final String label;
  final VoidCallback onTap;
  final VoidCallback onHoldStart;
  final VoidCallback onHoldEnd;

  const _DoseButton({
    required this.color,
    required this.icon,
    required this.label,
    required this.onTap,
    required this.onHoldStart,
    required this.onHoldEnd,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      onLongPressStart: (_) => onHoldStart(),
      onLongPressEnd: (_) => onHoldEnd(),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14), // to h∆°n
        decoration: BoxDecoration(
          color: color,
          borderRadius: BorderRadius.circular(18),
          boxShadow: [BoxShadow(color: Colors.black.withOpacity(0.12), blurRadius: 10, offset: const Offset(0, 4))],
        ),
        child: Row(
          children: [
            Text(icon, style: const TextStyle(color: Colors.white, fontWeight: FontWeight.w900, fontSize: 18)),
            const SizedBox(width: 8),
            Text(label, style: const TextStyle(color: Colors.white, fontWeight: FontWeight.w700, fontSize: 18)),
          ],
        ),
      ),
    );
  }
}
