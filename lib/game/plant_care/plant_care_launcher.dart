// lib/game/plant_care/plant_care_game_launcher.dart
import 'package:flutter/material.dart';

// Game runtime
import 'package:mobileapp/game/core/game.dart';
import 'package:mobileapp/game/plant_care/plant_care_game.dart';
import 'package:mobileapp/game/plant_care/plant_care_play_screen.dart';
import 'package:mobileapp/game/core/types.dart';
import 'package:mobileapp/game/widgets/game_screen_wrapper.dart';
import 'package:mobileapp/game/plant_care/data/plant_care_data.dart';

// Models & Services
import '../core/game_progress.dart';
import '../../services/game_progress_service.dart';
import '../../services/game_session_service.dart';

// UI sau khi ho√†n th√†nh v√°n
import '../../screens/game_result_screen.dart';

class PlantCareGameLauncher extends StatefulWidget {
  final String treId;
  final String treName;
  final GameDifficulty difficulty;

  const PlantCareGameLauncher({
    super.key,
    required this.treId,
    required this.treName,
    required this.difficulty,
  });

  @override
  State<PlantCareGameLauncher> createState() => _PlantCareGameLauncherState();
}

class _PlantCareGameLauncherState extends State<PlantCareGameLauncher> {
  static const String _gameId = 'plant_care';
  static const String _gameName = 'ChƒÉm S√≥c C√¢y Tr·ªìng';

  final GlobalKey<PlantCarePlayScreenState> _playScreenKey = GlobalKey();

  int _mapDifficulty(GameDifficulty d) => switch (d) {
    GameDifficulty.easy => 1,
    GameDifficulty.medium => 2,
    GameDifficulty.hard => 3,
  };

  Future<void> _finishAndSave(int correct, int wrong) async {
    // Ch·∫•m ƒëi·ªÉm: ch·ªâ c·ªông khi ‚Äúthi·∫øu -> v√†o t·ªëi ∆∞u‚Äù, sai khi ‚Äúƒë√£ ƒë·ªß v·∫´n l√†m / v∆∞·ª£t tolerance‚Äù
    final raw = correct * 3 - wrong * 1; // ph·∫°t nh·∫π ƒë·ªÉ khuy·∫øn kh√≠ch th·ª≠
    final score = raw < 0 ? 0 : raw;

    await GameSessionService().saveAndReward(
      treId: widget.treId,
      gameId: _gameId,
      gameName: _gameName,
      difficulty: _mapDifficulty(widget.difficulty).toString(),
      correct: correct,
      wrong: wrong,
    );

    if (!mounted) return;

    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (_) => GameResultScreen(
          treId: widget.treId,
          treName: widget.treName,
          correct: correct,
          wrong: wrong,
          score: score,
        ),
      ),
    );
  }

  void _restartGame() {
    Navigator.of(context).pushReplacement(
      MaterialPageRoute(
        builder: (context) => PlantCareGameLauncher(
          treId: widget.treId,
          treName: widget.treName,
          difficulty: widget.difficulty,
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final Game game = PlantCareGame(difficulty: _mapDifficulty(widget.difficulty));

    return GameScreenWrapper(
      gameName: _gameName,
      onFinishAndExit: () {
        final state = _playScreenKey.currentState;
        if (state != null) {
          _finishAndSave(state.correctActions, state.wrongActions);
        } else {
          Navigator.of(context).pop();
        }
      },
      onRestart: _restartGame,
      handbookContent: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisSize: MainAxisSize.min,
          children: const [
            Text(
              'M·ª•c ti√™u ch√≠nh:',
              style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 18.0),
            ),
            SizedBox(height: 8),
            Text(
              '‚Ä¢ Gi·ªØ c√°c thanh tr·∫°ng th√°i (N∆∞·ªõc, √Ånh s√°ng, Dinh d∆∞·ª°ng) trong V√ôNG T·ªêI ∆ØU ƒë·ªÉ c√¢y kh·ªèe m·∫°nh v√† ph√°t tri·ªÉn qua c√°c giai ƒëo·∫°n.',
              style: TextStyle(color: Colors.white70, fontSize: 16.0),
            ),
            SizedBox(height: 16),
            Text(
              'L∆∞u √Ω theo lo√†i:',
              style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 18.0),
            ),
            SizedBox(height: 8),
            Text('‚Ä¢ üåµ X∆∞∆°ng r·ªìng: N∆∞·ªõc 30‚Äì60, S√°ng 70‚Äì90 (nhi·ªÅu n∆∞·ªõc d·ªÖ √∫ng).',
                style: TextStyle(color: Colors.white70, fontSize: 16.0)),
            SizedBox(height: 4),
            Text('‚Ä¢ üåø D∆∞∆°ng x·ªâ: N∆∞·ªõc 70‚Äì90, S√°ng 40‚Äì70 (n·∫Øng g·∫Øt d·ªÖ ch√°y l√°).',
                style: TextStyle(color: Colors.white70, fontSize: 16.0)),
            SizedBox(height: 16),
            Text(
              'C√°ch t√≠nh ƒëi·ªÉm:',
              style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 18.0),
            ),
            SizedBox(height: 8),
            Text(
              '‚Ä¢ Ch·ªâ c·ªông ƒëi·ªÉm khi b·∫°n ƒë∆∞a ch·ªâ s·ªë t·ª´ m·ª©c THI·∫æU v√†o V√ôNG T·ªêI ∆ØU. '
                  'N·∫øu ƒë√£ ƒë·ªß m√† v·∫´n ti·∫øp t·ª•c, ho·∫∑c l√†m v∆∞·ª£t ng∆∞·ª°ng ch·ªãu ƒë·ª±ng ‚Üí b·ªã t√≠nh sai.',
              style: TextStyle(color: Colors.white70, fontSize: 16.0),
            ),
          ],
        ),
      ),
      builder: (context, isPaused) {
        return PlantCarePlayScreen(
          key: _playScreenKey,
          game: game,
          onFinish: (c, w) => WidgetsBinding.instance.addPostFrameCallback((_) => _finishAndSave(c, w)),
        );
      },
    );
  }
}
