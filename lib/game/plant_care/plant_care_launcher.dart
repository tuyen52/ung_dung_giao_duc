// lib/game/plant_care/plant_care_game_launcher.dart
import 'dart:convert';
import 'package:flutter/material.dart';

// ƒê·ªô kh√≥ h·ªá th·ªëng
import 'package:mobileapp/game/core/types.dart' show GameDifficulty;

// L√µi & m√†n ch∆°i
import 'core/plant_core.dart';
import 'plant_care_play_screen.dart';

// D·ªãch v·ª• h·ªá th·ªëng
import 'package:mobileapp/services/game_progress_service.dart';
import 'package:mobileapp/services/game_session_service.dart';
import 'package:mobileapp/game/core/game_progress.dart';

// Wrapper c·ªßa b·∫°n
import 'package:mobileapp/game/widgets/game_screen_wrapper.dart';

// K·∫øt qu·∫£ t·ªïng h·ªá th·ªëng
import 'package:mobileapp/screens/game_result_screen.dart';

const String _kPlantCareGameId = 'plant_care';

DifficultyLevel _mapGameDifficulty(GameDifficulty d) {
  switch (d) {
    case GameDifficulty.easy:
      return DifficultyLevel.easy;
    case GameDifficulty.medium:
      return DifficultyLevel.normal;
    case GameDifficulty.hard:
      return DifficultyLevel.hard;
  }
}

int _difficultyToInt(DifficultyLevel d) {
  if (d == DifficultyLevel.easy) return 1;
  if (d == DifficultyLevel.hard) return 3;
  return 2; // normal
}

String _encodeState(Map<String, dynamic> m) => json.encode(m);
Map<String, dynamic>? _decodeState(String s) {
  try {
    return json.decode(s) as Map<String, dynamic>;
  } catch (_) {
    return null;
  }
}

class PlantCareGameLauncher extends StatefulWidget {
  final String treId;
  final String treName;
  final GameDifficulty difficulty;
  final int totalDays;
  final int dayLengthSec;

  const PlantCareGameLauncher({
    super.key,
    required this.treId,
    required this.treName,
    required this.difficulty,
    this.totalDays = 5,
    this.dayLengthSec = 90,
  });

  @override
  State<PlantCareGameLauncher> createState() => _PlantCareGameLauncherState();
}

class _PlantCareGameLauncherState extends State<PlantCareGameLauncher> {
  final _progress = GameProgressService();
  final GlobalKey _playKey = GlobalKey();

  bool _loading = true;
  GameProgress? _gp;
  Map<String, dynamic>? _initialStateMap;

  @override
  void initState() {
    super.initState();
    _loadProgress();
  }

  Future<void> _loadProgress() async {
    _gp = await _progress.load(widget.treId, _kPlantCareGameId);
    if (_gp != null && _gp!.deck.isNotEmpty) {
      _initialStateMap = _decodeState(_gp!.deck.first);
    }
    if (mounted) setState(() => _loading = false);
  }

  Future<void> _saveSnapshot({
    required Map<String, dynamic> state,
    required int dayIndex,
    required int timeLeftSec,
    int stars = 0,
  }) async {
    final diffInt =
        _gp?.difficulty ?? _difficultyToInt(_mapGameDifficulty(widget.difficulty));
    final gp = GameProgress(
      treId: widget.treId,
      gameId: _kPlantCareGameId,
      difficulty: diffInt,
      deck: <String>[_encodeState(state)], // l∆∞u state JSON
      index: dayIndex,
      correct: stars, // t·ªïng sao t√≠ch lu·ªπ
      wrong: 0,
      timeLeft: timeLeftSec,
      updatedAt: DateTime.now().toIso8601String(),
    );
    await _progress.save(gp);
  }

  Future<void> _clearProgress() async {
    await _progress.clear(widget.treId, _kPlantCareGameId);
  }

  int _computeScore(int correct, int wrong) {
    final score = correct * 8 - wrong * 5;
    return score < 0 ? 0 : score;
  }

  Future<void> _finishAndShowResult(int correct, int wrong) async {
    await GameSessionService().saveAndReward(
      treId: widget.treId,
      gameId: _kPlantCareGameId,
      gameName: 'ChƒÉm S√≥c C√¢y Tr·ªìng',
      difficulty: (_gp?.difficulty ??
          _difficultyToInt(_mapGameDifficulty(widget.difficulty)))
          .toString(),
      correct: correct,
      wrong: wrong,
    );

    final score = _computeScore(correct, wrong);

    if (!mounted) return;
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (_) => GameResultScreen(
          treId: widget.treId,
          treName: widget.treName,
          correct: correct,
          wrong: wrong,
          score: score,
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (_loading) {
      return const Scaffold(
        body: SafeArea(child: Center(child: CircularProgressIndicator())),
      );
    }

    return GameScreenWrapper(
      gameName: 'ChƒÉm s√≥c c√¢y',
      handbookContent: const _PlantHelpSheet(),
      showHandbookOnStart: false,

      onFinishAndExit: () => (_playKey.currentState as dynamic?)?.finishGame(),
      onSaveAndExit: () => (_playKey.currentState as dynamic?)?.outToHome(),

      onRestart: () => (_playKey.currentState as dynamic?)?.restartGame(),

      builder: (context, bool isPaused) {
        return PlantCarePlayScreen(
          key: _playKey,
          isPaused: isPaused,
          difficulty: _mapGameDifficulty(widget.difficulty),
          totalDays: widget.totalDays,
          dayLengthSec: widget.dayLengthSec,
          initialStateMap: _initialStateMap,

          onFinish: (int correct, int wrong) =>
              WidgetsBinding.instance.addPostFrameCallback(
                    (_) => _finishAndShowResult(correct, wrong),
              ),

          onSaveProgress: ({
            required Map<String, dynamic> state,
            required int dayIndex,
            required int stars,
            required int timeLeftSec,
          }) =>
              _saveSnapshot(
                state: state,
                dayIndex: dayIndex,
                stars: stars,
                timeLeftSec: timeLeftSec,
              ),

          onClearProgress: _clearProgress,
        );
      },
    );
  }
}

// ===== B·∫¢N H∆Ø·ªöNG D·∫™N ƒê√É ƒê∆Ø·ª¢C CH·ªàNH S·ª¨A M√ÄU S·∫ÆC CHO D·ªÑ ƒê·ªåC =====
class _PlantHelpSheet extends StatelessWidget {
  const _PlantHelpSheet();

  @override
  Widget build(BuildContext context) {
    const double baseFontSize = 16.0;
    const double headingFontSize = 18.0;

    // --- THAY ƒê·ªîI: S·ª≠ d·ª•ng m√†u s√°ng, t∆∞∆°ng ph·∫£n cao ---
    final headingStyle = TextStyle(
      fontSize: headingFontSize,
      fontWeight: FontWeight.bold,
      color: const Color(0xFFFFF59D), // M√†u v√†ng nh·∫°t cho ƒë·ªÅ m·ª•c
      height: 1.5,
    );
    final bodyStyle = const TextStyle(
      fontSize: baseFontSize,
      height: 1.6,
      color: Colors.white, // M√†u tr·∫Øng cho n·ªôi dung
    );
    final boldBodyStyle = bodyStyle.copyWith(fontWeight: FontWeight.bold);

    Widget buildRichText(List<TextSpan> spans) {
      return RichText(text: TextSpan(style: bodyStyle, children: spans));
    }

    return SafeArea(
      child: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.fromLTRB(20, 16, 20, 24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Center(
                child: Text(
                  'B√≠ K√≠p Tr·ªìng C√¢y Th·∫ßn K·ª≥ ‚ú®',
                  // --- THAY ƒê·ªîI: Ti√™u ƒë·ªÅ m√†u tr·∫Øng, to r√µ ---
                  style: headingStyle.copyWith(fontSize: 22, color: Colors.white),
                ),
              ),
              const SizedBox(height: 12),
              Center(
                child: Text(
                  'Ch√†o b·∫°n nh·ªè! H√£y c√πng bi·∫øn m·ªôt h·∫°t m·∫ßm b√© x√≠u th√†nh m·ªôt c√¢y hoa r·ª±c r·ª° nh√©!',
                  // --- THAY ƒê·ªîI: Ch·ªØ tr·∫Øng d·ªÖ ƒë·ªçc h∆°n ---
                  style: bodyStyle.copyWith(fontStyle: FontStyle.italic, color: Colors.white.withOpacity(0.9)),
                  textAlign: TextAlign.center,
                ),
              ),
              const SizedBox(height: 24),

              Text('1. M·ª•c Ti√™u C·ªßa Con L√† G√¨? üèÜ', style: headingStyle),
              const SizedBox(height: 8),
              buildRichText([
                const TextSpan(text: 'Nhi·ªám v·ª• c·ªßa con l√† chƒÉm s√≥c cho c√¢y l·ªõn l√™n qua c√°c giai ƒëo·∫°n: '),
                TextSpan(text: 'H·∫°t m·∫ßm üå± ‚ûî C√¢y con üåø ‚ûî C√¢y tr∆∞·ªüng th√†nh üå≥ ‚ûî C√¢y ra hoa üå∏.', style: boldBodyStyle),
              ]),
              const SizedBox(height: 24),

              Text('2. L√†m Sao ƒê·ªÉ C√¢y Lu√¥n Kh·ªèe M·∫°nh? ‚ù§Ô∏è', style: headingStyle),
              const SizedBox(height: 8),
              buildRichText([
                const TextSpan(text: 'C√¢y c·∫ßn 4 th·ª© ƒë·ªÉ vui v·∫ª:\n'),
                TextSpan(text: '     üíß N∆∞·ªõc\n', style: boldBodyStyle),
                TextSpan(text: '     ‚òÄÔ∏è √Ånh S√°ng\n', style: boldBodyStyle),
                TextSpan(text: '     üåø Dinh D∆∞·ª°ng\n', style: boldBodyStyle),
                TextSpan(text: '     üêû S·∫°ch S·∫Ω (kh√¥ng c√≥ s√¢u)\n\n', style: boldBodyStyle),
                const TextSpan(text: 'H√£y nh√¨n c√°c thanh ƒëo ·ªü b√™n ph·∫£i, m·ªói thanh c√≥ m·ªôt '),
                TextSpan(text: 'V√ôNG M√ÄU V√ÄNG. ', style: boldBodyStyle),
                const TextSpan(text: 'Con h√£y c·ªë g·∫Øng gi·ªØ cho c√°c ch·ªâ s·ªë lu√¥n n·∫±m '),
                TextSpan(text: 'B√äN TRONG', style: boldBodyStyle),
                const TextSpan(text: ' v√πng v√†ng ƒë√≥ nh√©!\n\nKhi con l√†m t·ªët, '),
                TextSpan(text: 'Thanh S·ª©c Kh·ªèe (c√≥ h√¨nh ‚ù§Ô∏è) ', style: boldBodyStyle),
                const TextSpan(text: 'c·ªßa c√¢y s·∫Ω ƒë·∫ßy l√™n!'),
              ]),
              const SizedBox(height: 24),

              Text('3. C√°ch ChƒÉm S√≥c C√¢y üéÆ', style: headingStyle),
              const SizedBox(height: 8),
              buildRichText([
                const TextSpan(text: '·ªû ph√≠a d∆∞·ªõi m√†n h√¨nh c√≥ c√°c n√∫t c√¥ng c·ª•. M·ªói n√∫t s·∫Ω m·ªü ra m·ªôt '),
                TextSpan(text: 'tr√≤ ch∆°i nh·ªè (mini-game) ', style: boldBodyStyle),
                const TextSpan(text: 'r·∫•t vui! Ch∆°i gi·ªèi s·∫Ω gi√∫p c√¢y ƒë∆∞·ª£c ƒë√°p ·ª©ng nhu c·∫ßu ngay l·∫≠p t·ª©c!'),
              ]),
              const SizedBox(height: 24),

              Text('4. B√≠ M·∫≠t ƒê·ªÉ C√¢y L·ªõn Nhanh & Nh·∫≠n Sao ‚ú®', style: headingStyle),
              const SizedBox(height: 8),
              buildRichText([
                const TextSpan(text: 'C√¢y c√≥ S·ª©c Kh·ªèe (‚ù§Ô∏è) c√†ng cao th√¨ '),
                TextSpan(text: 'Thanh TƒÉng Tr∆∞·ªüng ', style: boldBodyStyle),
                const TextSpan(text: '(thanh ti·∫øn ƒë·ªô ·ªü d∆∞·ªõi c√¢y) s·∫Ω ƒë·∫ßy c√†ng nhanh. Khi thanh n√†y ƒë·∫ßy, c√¢y s·∫Ω l·ªõn l√™n!\n\n'),
                const TextSpan(text: 'V√†o cu·ªëi m·ªói ng√†y, con s·∫Ω ƒë∆∞·ª£c th∆∞·ªüng sao n·∫øu chƒÉm s√≥c c√¢y th·∫≠t t·ªët!'),
              ]),
              const SizedBox(height: 24),
            ],
          ),
        ),
      ),
    );
  }
}